// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processmon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "processmon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MonLogMSG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonLogMSG_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_processmon_2eproto() {
  protobuf_AddDesc_processmon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "processmon.proto");
  GOOGLE_CHECK(file != NULL);
  MonLogMSG_descriptor_ = file->message_type(0);
  static const int MonLogMSG_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, shost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, sprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, log_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, s_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, s_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, n_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, s_data_exten_),
  };
  MonLogMSG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonLogMSG_descriptor_,
      MonLogMSG::default_instance_,
      MonLogMSG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonLogMSG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonLogMSG));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_processmon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonLogMSG_descriptor_, &MonLogMSG::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_processmon_2eproto() {
  delete MonLogMSG::default_instance_;
  delete MonLogMSG_reflection_;
}

void protobuf_AddDesc_processmon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020processmon.proto\"\205\001\n\tMonLogMSG\022\r\n\005sHos"
    "t\030\001 \001(\014\022\020\n\010sProcess\030\002 \001(\014\022\021\n\tlog_state\030\003"
    " \001(\005\022\016\n\006s_time\030\004 \001(\003\022\016\n\006s_info\030\005 \001(\014\022\016\n\006"
    "n_type\030\006 \001(\005\022\024\n\014s_data_exten\030\007 \001(\014", 154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "processmon.proto", &protobuf_RegisterTypes);
  MonLogMSG::default_instance_ = new MonLogMSG();
  MonLogMSG::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_processmon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_processmon_2eproto {
  StaticDescriptorInitializer_processmon_2eproto() {
    protobuf_AddDesc_processmon_2eproto();
  }
} static_descriptor_initializer_processmon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MonLogMSG::kSHostFieldNumber;
const int MonLogMSG::kSProcessFieldNumber;
const int MonLogMSG::kLogStateFieldNumber;
const int MonLogMSG::kSTimeFieldNumber;
const int MonLogMSG::kSInfoFieldNumber;
const int MonLogMSG::kNTypeFieldNumber;
const int MonLogMSG::kSDataExtenFieldNumber;
#endif  // !_MSC_VER

MonLogMSG::MonLogMSG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonLogMSG::InitAsDefaultInstance() {
}

MonLogMSG::MonLogMSG(const MonLogMSG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonLogMSG::SharedCtor() {
  _cached_size_ = 0;
  shost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sprocess_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_state_ = 0;
  s_time_ = GOOGLE_LONGLONG(0);
  s_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  n_type_ = 0;
  s_data_exten_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonLogMSG::~MonLogMSG() {
  SharedDtor();
}

void MonLogMSG::SharedDtor() {
  if (shost_ != &::google::protobuf::internal::kEmptyString) {
    delete shost_;
  }
  if (sprocess_ != &::google::protobuf::internal::kEmptyString) {
    delete sprocess_;
  }
  if (s_info_ != &::google::protobuf::internal::kEmptyString) {
    delete s_info_;
  }
  if (s_data_exten_ != &::google::protobuf::internal::kEmptyString) {
    delete s_data_exten_;
  }
  if (this != default_instance_) {
  }
}

void MonLogMSG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonLogMSG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonLogMSG_descriptor_;
}

const MonLogMSG& MonLogMSG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_processmon_2eproto();
  return *default_instance_;
}

MonLogMSG* MonLogMSG::default_instance_ = NULL;

MonLogMSG* MonLogMSG::New() const {
  return new MonLogMSG;
}

void MonLogMSG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shost()) {
      if (shost_ != &::google::protobuf::internal::kEmptyString) {
        shost_->clear();
      }
    }
    if (has_sprocess()) {
      if (sprocess_ != &::google::protobuf::internal::kEmptyString) {
        sprocess_->clear();
      }
    }
    log_state_ = 0;
    s_time_ = GOOGLE_LONGLONG(0);
    if (has_s_info()) {
      if (s_info_ != &::google::protobuf::internal::kEmptyString) {
        s_info_->clear();
      }
    }
    n_type_ = 0;
    if (has_s_data_exten()) {
      if (s_data_exten_ != &::google::protobuf::internal::kEmptyString) {
        s_data_exten_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonLogMSG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sHost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sProcess;
        break;
      }

      // optional bytes sProcess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sprocess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_state;
        break;
      }

      // optional int32 log_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_state_)));
          set_has_log_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_s_time;
        break;
      }

      // optional int64 s_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &s_time_)));
          set_has_s_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_s_info;
        break;
      }

      // optional bytes s_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_n_type;
        break;
      }

      // optional int32 n_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_type_)));
          set_has_n_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_s_data_exten;
        break;
      }

      // optional bytes s_data_exten = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_data_exten:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_data_exten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonLogMSG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sHost = 1;
  if (has_shost()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->shost(), output);
  }

  // optional bytes sProcess = 2;
  if (has_sprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sprocess(), output);
  }

  // optional int32 log_state = 3;
  if (has_log_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->log_state(), output);
  }

  // optional int64 s_time = 4;
  if (has_s_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->s_time(), output);
  }

  // optional bytes s_info = 5;
  if (has_s_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->s_info(), output);
  }

  // optional int32 n_type = 6;
  if (has_n_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->n_type(), output);
  }

  // optional bytes s_data_exten = 7;
  if (has_s_data_exten()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->s_data_exten(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonLogMSG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes sHost = 1;
  if (has_shost()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->shost(), target);
  }

  // optional bytes sProcess = 2;
  if (has_sprocess()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sprocess(), target);
  }

  // optional int32 log_state = 3;
  if (has_log_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->log_state(), target);
  }

  // optional int64 s_time = 4;
  if (has_s_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->s_time(), target);
  }

  // optional bytes s_info = 5;
  if (has_s_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->s_info(), target);
  }

  // optional int32 n_type = 6;
  if (has_n_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->n_type(), target);
  }

  // optional bytes s_data_exten = 7;
  if (has_s_data_exten()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->s_data_exten(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonLogMSG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sHost = 1;
    if (has_shost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shost());
    }

    // optional bytes sProcess = 2;
    if (has_sprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sprocess());
    }

    // optional int32 log_state = 3;
    if (has_log_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_state());
    }

    // optional int64 s_time = 4;
    if (has_s_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->s_time());
    }

    // optional bytes s_info = 5;
    if (has_s_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_info());
    }

    // optional int32 n_type = 6;
    if (has_n_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_type());
    }

    // optional bytes s_data_exten = 7;
    if (has_s_data_exten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s_data_exten());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonLogMSG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonLogMSG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonLogMSG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonLogMSG::MergeFrom(const MonLogMSG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shost()) {
      set_shost(from.shost());
    }
    if (from.has_sprocess()) {
      set_sprocess(from.sprocess());
    }
    if (from.has_log_state()) {
      set_log_state(from.log_state());
    }
    if (from.has_s_time()) {
      set_s_time(from.s_time());
    }
    if (from.has_s_info()) {
      set_s_info(from.s_info());
    }
    if (from.has_n_type()) {
      set_n_type(from.n_type());
    }
    if (from.has_s_data_exten()) {
      set_s_data_exten(from.s_data_exten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonLogMSG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonLogMSG::CopyFrom(const MonLogMSG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonLogMSG::IsInitialized() const {

  return true;
}

void MonLogMSG::Swap(MonLogMSG* other) {
  if (other != this) {
    std::swap(shost_, other->shost_);
    std::swap(sprocess_, other->sprocess_);
    std::swap(log_state_, other->log_state_);
    std::swap(s_time_, other->s_time_);
    std::swap(s_info_, other->s_info_);
    std::swap(n_type_, other->n_type_);
    std::swap(s_data_exten_, other->s_data_exten_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonLogMSG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonLogMSG_descriptor_;
  metadata.reflection = MonLogMSG_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
