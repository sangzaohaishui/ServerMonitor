/********************************************************************
	创建日期:	2016/06/24
	文 件 名:	IMainServiceControl
	扩 展 名:	h
	作    者:	zz
	
	说    明:	主服务控制接口,负责所有服务组件的加载、调度、生命周期管理
*********************************************************************/

#ifndef __IMAINSERVICECONTROL_H__
#define __IMAINSERVICECONTROL_H__

#include <string>
#include "IInterface.h"

/************************************************************************
*名  称：消息响应回调函数 
*说  明：用于规范响应服务框架内部消息的回调函数
*参  数：buf----数据地址
		 length----数据长度
*返回值：无
************************************************************************/
typedef void (*MESSAGE_HANDLER)(std::string topic, void* buf, unsigned int length);

class IServiceComponent;
class IMainServiceControl
{
public:
	/************************************************************************
	*名  称：获取/创建实例 
	*说  明：参考单例模式(注意:这里需要组件自己考虑线程安全策略)
	*参  数：无                                                                    
	*返回值：服务主控接口指针
	************************************************************************/
	static IMainServiceControl* GetInstance();

	/************************************************************************
	*名  称：释放实例 
	*说  明：参考单例模式
	*参  数：无                                                                    
	*返回值：无
	************************************************************************/
	static int FreeInstance();

	/************************************************************************
	*名  称：服务框架启动函数
	*说  明：启动整个框架,启动一次成功后再次调用失效
	*参  数：无                                                                    
	*返回值：处理结果标识
	************************************************************************/
	virtual int StartUp() = 0;

	/************************************************************************
	*名  称：服务框架停止函数
	*说  明：停止整个框架,
	*参  数：无                                                                    
	*返回值：处理结果标识
	************************************************************************/
	virtual int ShutDown() = 0;

	/************************************************************************
	*名  称：设置加载组件的路径 
	*说  明：设置组件加载的路径,建议选择不含中文/空格的路径
	*参  数：path----组件路径                                                                    
	*返回值：处理结果标识
	************************************************************************/
	virtual int SetComponentsPath(const std::string path) = 0;

	/************************************************************************
	*名  称：订阅消息函数 
	*说  明：为组件订阅消息
	*参  数：componentPtr----组件的指针
			 topic----主题
	*返回值：处理结果标识
	************************************************************************/
	virtual int SubscribeMessage(const IServiceComponent* componentPtr, const std::string topic) = 0;

	/************************************************************************
	*名  称：订阅消息函数 
	*说  明：非组件模式订阅,例如:外部软件环境通过主服务控制接口订阅消息
	*参  数：messageHandlerPtr----回调函数的指针
			 topic----主题
	*返回值：处理结果标识
	************************************************************************/
	virtual int SubscribeMessage(const MESSAGE_HANDLER messageHandlerPtr, const std::string topic) = 0;

	/************************************************************************
	*名  称：取消订阅函数 
	*说  明：组件模式
	*参  数：componentPtr----组件的指针
	         topic----主题
	*返回值：处理结果标识
	************************************************************************/
	virtual int UnsubscribeMessage(const IServiceComponent* componentPtr, const std::string topic) = 0;
	 
	/************************************************************************
	*名  称：取消订阅函数 
	*说  明：非组件模式
	*参  数：messageHandlerPtr----回调函数的指针
	         topic----主题
	*返回值：处理结果标识
	************************************************************************/
	virtual int UnsubscribeMessage(const MESSAGE_HANDLER messageHandlerPtr, const std::string topic) = 0;

	/************************************************************************
	*名  称：发送同步消息 
	*说  明：阻塞式消息发送
	*参  数：topic----主题
			 buf----数据地址
		 	 length----数据长度
	*返回值：处理结果标识
	************************************************************************/
	virtual int SendMessage(std::string topic, void* buf, unsigned int length) = 0;

	/************************************************************************
	*名  称：发送异步消息 
	*说  明：非阻塞式消息发送
	*参  数：topic----主题
			 buf----数据地址
		 	 length----数据长度
	*返回值：处理结果标识
	************************************************************************/		
	virtual int PostMessage(std::string topic, void* buf, unsigned int length) = 0;

	/************************************************************************
	*名  称：组件自定义接口获取函数
	*说  明：获取组件注册的接口函数
	*参  数：interfaceID----接口标识(要求全局唯一)                                                                    
	*返回值：组件自定义接口指针
	************************************************************************/
	virtual IInterface* QueryInterface(const std::string interfaceID) = 0;

	/************************************************************************
	*名  称：将日志信息打印到Panle上
	*说  明：可将日志信息打印到面板上
	*参  数：                                                                   
	*返回值：日志打印接口
	************************************************************************/
	virtual void WritePanelLog(const std::string& log) = 0;

	/************************************************************************
	*名  称：将日志信息打印到文件中上
	*说  明：将日志信息打印到文件中上
	*参  数：                                                                   
	*返回值：日志打印接口
	************************************************************************/
	virtual void WriteFileLog(const std::string& log) = 0;

protected:
	/************************************************************************
	*名  称：构造函数
	*说  明：保护类构造函数,用于单例模式 
	*参  数：无                                                                    
	*返回值：无
	************************************************************************/
	IMainServiceControl(){}

private:
	static IMainServiceControl* m_Instance;
};

#endif